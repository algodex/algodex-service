#!/usr/bin/env node
const fs = require('fs');
const args = require('minimist')(process.argv.slice(2));
const getAlgod = require('../src/algod');
const getDatabases = require('../src/db/get-databases');
const distributeRewards =
  require('../src/rewards/distribute/distribute-rewards');
const algosdk = require('algosdk');

/* Usage
 *
 * ./distribute-rewards --inputFile=<file> --amount=<amount ALGX>
 */

const initAndDistribute = async () => {
  const algodClient = getAlgod();
  const databases = getDatabases();
  const inputFile = args.inputFile;
  const amount = parseFloat(args.amount);
  const network = process.env.ALGORAND_NETWORK;
  const mnemonic = process.env.REWARDS_WALLET_MNEMONIC;
  const accrualNetwork = args.accrualNetwork;
  const assetId = process.env.ALGX_ASSET_ID;
  const epoch = args.epoch;

  if (!inputFile) {
    throw new Error('No input file defined!');
  }
  if (!amount) {
    throw new Error('No amount defined!');
  }
  if (!network) {
    throw new Error('no network defined');
  }
  if (!epoch) {
    throw new Error('no epoch defined');
  }
  if (!mnemonic) {
    throw new Error('no mnemonic defined');
  }
  if (!accrualNetwork) {
    throw new Error('no accrualNetwork defined');
  }
  if (!assetId) {
    throw new Error('no assetId defined');
  }
  const account = algosdk.mnemonicToSecretKey(mnemonic);
  const data = fs.readFileSync(inputFile, 'utf8');
  const wallets = data.split('\n').filter(line => line.length > 0);

  distributeRewards({wallets, epoch, algodClient,
    rewardsDB: databases.rewards_distribution, amount: (amount * 10**6),
    network,
    accrualNetwork,
    fromAccount: account, assetId: parseInt(assetId)});
};
initAndDistribute();
