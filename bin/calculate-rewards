#!/usr/bin/env node
/* eslint-disable require-jsdoc */

/* USAGE:
 *
 * This script will calculate all rewards for the epoch and upload them to the 
 * database.
 *
 * bin/calculate-rewards --epoch={epoch}
 */

require('dotenv').config();
const getDatabases = require('../src/db/get-databases');
const databases = getDatabases();
const formattedEscrowDB = databases.formatted_escrow;
const ownerBalanceDB = databases.owner_balance;

const args = require('minimist')(process.argv.slice(2));
if (args.epoch === undefined) {
  throw new Error('Epoch is missing!');
}
const epoch = parseInt(args.epoch);


let seed = 1;
function random() {
  const x = Math.sin(seed++) * 10000;
  return x - Math.floor(x);
}

// const blocksDB = databases.blocks;
// const syncedDB = databases.synced_blocks;


const getSequenceInfo = (escrows) => {
  const unixTimeToChangedEscrows = escrows.reduce( (timeline, escrow) => {
    const times = escrow.data.history.map((historyItem) => historyItem.time);
    times.forEach( (time) => {
      const key = 'ts:'+time;
      if (!(key in timeline)) {
        timeline[key] = [];
      }
      const addrArr = timeline[key];
      addrArr.push(escrow._id); // push escrow address
    });
    return timeline;
  }, {});

  const changedEscrowSeq = Object.keys(unixTimeToChangedEscrows)
      .map((key) => parseInt(key.split(':')[1]));
  changedEscrowSeq.sort();

  return {unixTimeToChangedEscrows, changedEscrowSeq};
};
const getEscrowAndTimeToBalance = (escrows) => {
  const escrowTimeMap = escrows.reduce( (escrowTimeMap, escrow) => {
    escrow.data.history.forEach((historyItem) => {
      const time = historyItem.time;
      const balance = escrow.data.escrowInfo.isAlgoBuyEscrow ?
        historyItem.algoAmount : historyItem.asaAmount;
      const key = escrow._id+':'+time;
      escrowTimeMap[key] = balance;
    });
    return escrowTimeMap;
  }, {});
  return escrowTimeMap;
};

const getSecondsInEpoch = () => {
  return 604800;
};
const getEpochStart = (epoch) => {
  const start = parseInt(process.env.EPOCH_LAUNCH_UNIX_TIME);
  const secondsInEpoch = getSecondsInEpoch();
  return start + (secondsInEpoch * (epoch - 1));
};
const getEpochEnd = (epoch) => {
  return getEpochStart(epoch) + getSecondsInEpoch();
};
const getOwnerBalanceDataToHist = (ownerBalanceData) => {
  return ownerBalanceData.rows.reduce( (ownerToHist, row) => {
    const owner = row;
    return ownerToHist;
  }, {});
};

async function run() {
  const accountData = await formattedEscrowDB.query('formatted_escrow/epochs', {
    keys: [`${epoch}`]});
  const escrowAddrs = accountData.rows.map(row => row.value);
  
  const formattedEscrowData =
      await formattedEscrowDB.query('formatted_escrow/orderLookup', {
        keys: escrowAddrs});
  const escrows = formattedEscrowData.rows.map(row => row.value);
  const ownerWallets = escrows.map( (escrow) => escrow.data.escrowInfo.ownerAddr);
  const ownerBalanceData = await ownerBalanceDB.query('owner_balance/ownerAddr', {
    keys: ownerWallets});

  
  const {unixTimeToChangedEscrows, changedEscrowSeq} = getSequenceInfo(escrows);
  const escrowTimeToBalance = getEscrowAndTimeToBalance(escrows);
  const epochStart = getEpochStart(epoch);
  const epochEnd = getEpochEnd(epoch);
  // console.log({changedEscrowSeq});

  // console.log(process.env.COUCHDB_BASE_URL);
  let timestep = epochStart;
  let escrowstep = 0;
  console.log(timestep);
  console.log(epochEnd);
  // console.log(unixTimeToChangedEscrows);
  do {
    timestep += Math.round(random()*60);
    const changedEscrowSet = new Set();
    while (escrowstep < changedEscrowSeq.length &&
          changedEscrowSeq[escrowstep] <= timestep) {
      const changeTime = changedEscrowSeq[escrowstep];
      const changedEscrows = unixTimeToChangedEscrows[`ts:${changeTime}`];
      changedEscrows.forEach((escrow) => changedEscrowSet.add(escrow));
      escrowstep++;
    }
    if (changedEscrowSet.length === 0) {
      continue;
    }
    console.log(timestep);
    // console.log(changedEscrowSet);
  } while (timestep < epochEnd);
}

run();
