#!/usr/bin/env node
/* eslint-disable require-jsdoc */

/* USAGE:
 *
 * This script will calculate all rewards for the epoch and upload them to the 
 * database.
 *
 * bin/calculate-rewards --epoch={epoch}
 */

require('dotenv').config();
const getDatabases = require('../src/db/get-databases');
const getSequenceInfo = require('../src/rewards/get-sequence-info');
const getBlocksToTime = require('../src/rewards/get-blocks-to-time');
const getEpochEnd = require('../src/rewards/get-epoch-end');
const getEpochStart = require('../src/rewards/get-epoch-start');
const getInitialBalances = require('../src/rewards/get-initial-balances');
// eslint-disable-next-line max-len
const getOwnerBalanceAtTime = require('../src/rewards/get-owner-balance-at-time');
const getInitialOwnerWalletToBalances =
  require('../src/rewards/get-initial-owner-wallet-to-balances');
// eslint-disable-next-line max-len
const getOwnerBalanceDataToHist = require('../src/rewards/get-owner-balance-data-to-hist');
// eslint-disable-next-line max-len
const getOwnerWalletChangeTimes = require('../src/rewards/get-owner-wallet-change-times');
const updateBalances = require('../src/rewards/update-balances');
const updateOwnerWallets = require('../src/rewards/update-owner-wallets');
const updateRewards = require('../src/rewards/update-rewards');
const updateSpreads = require('../src/rewards/update-spreads');
const getEscrowAndTimeToBalance =
    require('../src/rewards/get-escrow-and-time-to-balance.js');
const initWalletToRewards = require('../src/rewards/init-wallet-to-rewards');
const databases = getDatabases();
const formattedEscrowDB = databases.formatted_escrow;
const ownerBalanceDB = databases.owner_balance;
const blockDB = databases.blocks;

const args = require('minimist')(process.argv.slice(2));
if (args.epoch === undefined) {
  throw new Error('Epoch is missing!');
}
const epoch = parseInt(args.epoch);


let seed = 1;
function random() {
  const x = Math.sin(seed++) * 10000;
  return x - Math.floor(x);
}

async function run() {
  const accountData = await formattedEscrowDB.query('formatted_escrow/epochs', {
    keys: [`${epoch}`]});
  const escrowAddrs = accountData.rows.map(row => row.value);

  const formattedEscrowData =
      await formattedEscrowDB.query('formatted_escrow/orderLookup', {
        keys: escrowAddrs});
  const escrows = formattedEscrowData.rows.map(row => row.value);
  const escrowAddrToData =
    formattedEscrowData.rows.reduce((map, row) => {
      map[row._id] = row.value;
      return map;
    }, {});
  const ownerWallets =
    escrows.map( (escrow) => escrow.data.escrowInfo.ownerAddr);
  const ownerBalanceData =
    await ownerBalanceDB.query('owner_balance/ownerAddr', {
      keys: ownerWallets});

  const {unixTimeToChangedEscrows, changedEscrowSeq} = getSequenceInfo(escrows);
  const escrowTimeToBalance = getEscrowAndTimeToBalance(escrows);
  const epochStart = getEpochStart(epoch);
  const epochEnd = getEpochEnd(epoch);
  const ownerBalanceToHist = await getOwnerBalanceDataToHist(ownerBalanceData);
  const ownerWalletChangeTimes = getOwnerWalletChangeTimes(ownerBalanceToHist);
  const initialState = {
    accountData,
    changedEscrowSeq,
    escrows,
    escrowAddrs,
    escrowAddrToData,
    escrowTimeToBalance,
    epochEnd,
    epochStart,
    formattedEscrowData,
    ownerBalanceData,
    ownerBalanceToHist,
    ownerWalletChangeTimes,
    ownerWallets,
    unixTimeToChangedEscrows,
  };
  Object.freeze(initialState);

  let timestep = epochStart;
  let escrowstep = 0;
  let ownerstep = 0;
  console.log(timestep);
  console.log(epochEnd);

  // State machine data
  const escrowToBalance = getInitialBalances(timestep, escrows);
  const ownerWalletToALGXBalance = getInitialOwnerWalletToBalances(timestep,
      ownerBalanceToHist);
  const ownerWalletToRewards = initWalletToRewards(escrowAddrs);
  const spreads = getSpreads({escrowToBalance, escrowAddrToData});

  const stateMachine = {
    escrowToBalance,
    ownerWalletToALGXBalance,
    ownerWalletToRewards,
    spreads,
  };
  Object.freeze(stateMachine);

  do {
    timestep += Math.round(random()*60);
    let escrowDidChange = false;
    const ownerWalletsBalanceChangeSet = new Set();

    while (escrowstep < changedEscrowSeq.length &&
          changedEscrowSeq[escrowstep] <= timestep) {
      const changeTime = changedEscrowSeq[escrowstep];
      while (ownerstep <= ownerWalletChangeTimes.length &&
        changeTime >= ownerWalletChangeTimes[ownerstep].time) {
        ownerstep++; // Catch up to escrow time step
        // eslint-disable-next-line max-len
        ownerWalletChangeTimes[ownerstep].ownerAddrs.forEach( (addr) => {
          ownerWalletsBalanceChangeSet.add(addr);
        });
      }
      const changedEscrows = unixTimeToChangedEscrows[`ts:${changeTime}`];
      escrowDidChange = true;
      updateBalances({changedEscrows, ...stateMachine, ...initialState});
      escrowstep++;
    }
    if (ownerWalletsBalanceChangeSet.size > 0) {
      updateOwnerWallets({ownerWalletsBalanceChangeSet,
        ...stateMachine, ...initialState});
    }
    if (escrowDidChange) {
      updateSpreads({...stateMachine, ...initialState});
    }
    updateRewards({...stateMachine, ...initialState});
    console.log(timestep);
    // console.log(changedEscrowSet);
  } while (timestep < epochEnd);
}

run();
